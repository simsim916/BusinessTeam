심심
junior722_
온라인

최문석 — 2024.01.19. 오후 6:00
갈틱폰 ㄱ?
봉민지 — 2024.01.19. 오후 6:01
ㅋㅋ
ㅋ
ㅋㅋ
최문석 — 2024.01.19. 오후 6:01
가 아니라
김수미 — 2024.01.19. 오후 6:01
오바얀
최문석 — 2024.01.19. 오후 6:01
빨리 다들 우리 프로젝트해
봉민지 — 2024.01.19. 오후 6:01
ㄱㄷ리는중.
응
최문석 — 2024.01.19. 오후 6:01
일단 지금 민지꺼 반응형 했고
이번주말에 수미꺼 다 뜯어 고친다
김수미 — 2024.01.19. 오후 6:01
다시 문제가생김
첫화면에서는 사라졌는데
비번 잘못치면 탈퇴실패
문구안나옴
주용현 — 2024.01.19. 오후 6:02
ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ
김수미 — 2024.01.19. 오후 6:02
;;ㅋㅋㅋㅋㅋㅋ
주용현 — 2024.01.19. 오후 6:03
그 메세지를 setAttribute 할때 나는 dMessage 이런식으로 설정했는데 
너 jsp 파일에서 message 출력할때 그 이름이 달라서 그럴거야
남을거면 이따 알려주고
아니면 home.jsp 파일이랑 delete 코드 보내줄테니까 비교하면서 고쳐봐
우짤래 ?
김수미 — 2024.01.19. 오후 6:04
남을게여 ~
최문석 — 2024.01.21. 오전 8:17
미안하다 나 1시에 약속이 생겨서 혹시 물어볼거나 코드 스샷 해놓으면 알려줄께
지금은 프리하니 물어바
최문석 — 2024.01.21. 오후 4:15
이색히들 공부안해?
주용현 — 2024.01.21. 오후 4:15
ㅎㅎㅎ 밥먹고해야지~
김수미 — 어제 오후 6:08
지금 입력한 mlist mldetail
코드 공유좀요
놓쳤다..
주용현 — 어제 오후 6:08
저도 손
김수미 — 어제 오후 6:08
ㅋㅋㅋㅋ
봉민지 — 어제 오후 6:08
ㅋㅋ
김수미 — 어제 오후 6:08
@최문석
봉민지 — 어제 오후 6:08
ㅋㅋㅋㅋㅋ
주용현 — 어제 오후 6:08
문석쒸?
대답해
김수미 — 어제 오후 6:08
집중안해?
봉민지 — 어제 오후 6:08
이악물고먼산보는중
김수미 — 어제 오후 6:08
딴짓하네
최문석 — 어제 오후 6:08
나
10분 칼퇴임 ㅅㄱ;
용현이가 하겟지
김수미 — 어제 오후 6:08
ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ아니
코드 공유
봉민지 — 어제 오후 6:08
나
디테일은돼.
코공해줄게
김수미 — 어제 오후 6:08
detail이랑 list
봉민지 — 어제 오후 6:09
package spDispatcher;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import service.MemberService;

public class C02_mDetail implements Controller{

    @Override
    public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) {

        MemberService sc = new MemberService();
        ModelAndView mv = new ModelAndView();
        mv.addObject("detail", sc.selectOne("bong"));
        mv.setViewName("member/memberDetail");
        return mv;
    }
}
최문석 — 어제 오후 6:09
package spDispatcher;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import service.MemberService;

public class C01_mList implements Controller{

    public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) {
        MemberService sc = new MemberService();
        ModelAndView mv = new ModelAndView();
        mv.addObject("mList", sc.selectList());
        mv.setViewName("member/list");
        return mv;
    };
    
}
봉민지 — 어제 오후 6:09
오?
최문석 — 어제 오후 6:09
package spDispatcher;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import service.MemberService;

public class C02_mDetail implements Controller{

    @Override
    public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) {
        ModelAndView mv = new ModelAndView();
        MemberService sc = new MemberService();
        mv.addObject("mDetail", sc.selectOne("simsim916"));
        mv.setViewName("member/mDetail");
        return mv;
    };
}
최문석 — 오늘 오전 11:58
ㅎㅎ코드 줄꺼지?
봉민지 — 오늘 오전 11:58
????
김수미 — 오늘 오전 11:58
누구세요
봉민지 — 오늘 오전 11:58
저분지금뭐하심?ㅎ
주용현 — 오늘 오전 11:58
카악 퉤
김수미 — 오늘 오전 11:58
ㅋㅋㅋㅋ
최문석 — 오늘 오후 12:00
줘
주용현 — 오늘 오후 12:00
package iocDI_xml;

// ** Test1. 절차지향
class SsTV {
    public void turnOn() {
        System.out.println(" SsTV turnOn ");
    }
    public void turnOff() {
        System.out.println(" SsTV turnOff ");
    }
    public void soundUp() {
        System.out.println(" SsTV soundUp ");
    }
    public void soundDown() {
        System.out.println(" SsTV soundDown ");
    }

} //SsTV

class LgTV {
    public void powerOn() {
        System.out.println(" LgTV powerOn ");
    }
    public void powerOff() {
        System.out.println(" LgTV powerOff ");
    }
    public void volumeUp() {
        System.out.println(" LgTV volumeUp ");
    }
    public void volumeDown() {
        System.out.println(" LgTV volumeDown ");
    }

} //LgTV




public class TVUser01 {

    public static void main(String[] args) {



    } //main

} //class
김수미 — 오늘 오후 12:00
와 다들 착하다
천사네
봉민지 — 오늘 오후 12:00
삭제햇어
최문석 — 오늘 오후 12:00
우마이~
혼또니 우마이
ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ
봉민지 패키지 이름
D L로 해놈
봉민지 — 오늘 오후 12:01
내꺼복사혓어?
최문석 — 오늘 오후 12:01
ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ
주용현 — 오늘 오후 12:01
ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ
최문석 — 오늘 오후 12:01
D I 라고 모자라지만 착한아이야
봉민지 — 오늘 오후 12:01
di임?ㅋ
ㅋㅋ
ㅋ아
봉민지 — 오늘 오후 12:01
ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ
김수미 — 오늘 오후 12:01
ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ
최문석 — 오늘 오후 12:03
이거 다 배웠던건데 기억나냐?
탱크로 하던거잖아
봉민지 — 오늘 오후 12:03
그랬던가
새로운데
최문석 — 오늘 오후 12:03
그 좌회전 우회전 하던거잖아
나중에 코드좀 ^-^...
봉민지 — 오늘 오후 12:05
캡상추다
주용현 — 오늘 오후 12:22
package iocDI_xml;

// ** Test1. 절차지향
class SsTV {
	public void turnOn() {System.out.println("~~ SsTV turnOn ~~");}
	public void turnOff() {System.out.println("~~ SsTV turnOff ~~");}
확장
TVUser01.java
3KB
﻿
package iocDI_xml;

// ** Test1. 절차지향
class SsTV {
	public void turnOn() {System.out.println("~~ SsTV turnOn ~~");}
	public void turnOff() {System.out.println("~~ SsTV turnOff ~~");}
	public void soundUp() {System.out.println("~~ SsTV soundUp ~~");}
	public void soundDown() {System.out.println("~~ SsTV soundDown ~~");}
} // SsTV

class LgTV {
	public void powerOn() {System.out.println("~~ LgTV powerOn ~~");}
	public void powerOff() {System.out.println("~~ LgTV powerOff ~~");}
	public void volumeUp() {System.out.println("~~ LgTV volumeUp ~~");}
	public void volumeDown() {System.out.println("~~ LgTV volumeDown ~~");}
} // LgTV

// ** Test2. 객체지향 : 다형성 적용
// => interface, 구현을 강제 (메서드명 동일)
interface TV {
	void powerOn();
	void powerOff();
	void volumeUp();
	void volumeDown();
}

class SsTVi implements TV {
	
	public SsTVi() {System.out.println("~~ SsTvi 기본생성자 ~~ ");}
	
	public void powerOff() {System.out.println("~~ SsTVi powerOff ~~");}
	public void powerOn() {System.out.println("~~ SsTVi powerOn ~~");}
	public void volumeDown() {System.out.println("~~ SsTVi volumeDown ~~");}
	public void volumeUp() {System.out.println("~~ SsTVi volumeUp ~~");}
}

class LgTVi implements TV {
	
	public LgTVi() {System.out.println("~~ LgTvi 기본생성자 ~~ ");}
	
	public void powerOff() {System.out.println("~~ LgTVi powerOff ~~");}
	public void powerOn() {System.out.println("~~ LgTVi powerOn ~~");}
	public void volumeDown() {System.out.println("~~ LgTVi volumeDown ~~");}
	public void volumeUp() {System.out.println("~~ LgTVi volumeUp ~~");}
}


public class TVUser01 {

	public static void main(String[] args) {
		// ** Test1. 절차지향
		System.out.println("** Test1. 절차지향 **");
//		SsTV tv = new SsTV();
//		tv.turnOn();
//		tv.soundDown();
//		tv.soundUp();
//		tv.turnOff();
		// => TV 교체 (삼성 => LG) : 코드 완전 재작성 필요
		LgTV tv = new LgTV();
		tv.powerOn();
		tv.volumeDown();
		tv.volumeUp();
		tv.powerOff();

		// ** Test2. 객체지향
		// => 기본특징 : 캡슐화(접근제어), 상속, 추상(규칙성), 다형성(*)
		// => 다형성 적용 (하나의 메서드 혹은 객체가 다양한 행동을 할 수 있는)
		// -> 관련성이 없는 두객체를 하나의 인터페이스로 묶어줌, 규칙성 부여
		// -> 인터페이스에 정의된 메서드만 사용했다는 의미 (그러므로 교체가능)
		// -> TV 교체 필요 : 우측의 클래스만 교체 (단, 소스코드수정-재컴파일 이 필요함)
		
		System.out.println("** Test1. 객체지향 **");
		TV tvi = new LgTVi(); // 원하는 브랜드TV 객체 생성
		tvi.powerOn();
		tvi.volumeDown();
		tvi.volumeUp();
		tvi.powerOff();
//		tvi = new SsTVi(); : 다형성
		
		
	} // main

} // class
